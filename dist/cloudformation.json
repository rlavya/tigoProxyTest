{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Tigo Proxy deployment CloudFormation script",

  "Parameters": {
    "TagCostCenter": {
      "Description": "Cost Center Tag",
      "Type": "String",
      "Default": "digital-POS-All"
    },
    "InstanceName": {
      "Description": "Name of the EC2 instance",
      "Type": "String",
      "Default": "digital_distribution"
    },
    "KeyName": {
      "Description": "Name of and existing EC2 key pair to enable SSH access to the instance",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t1.micro",
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "GitRemote": {
      "Description": "URI of the Git repository of the application",
      "Type": "String",
      "Default": "git@github.com:maddevelopmentco/tigo-proxy.git"
    },
    "GitBranch": {
      "Description": "Git branch to deploy",
      "Type": "String",
      "Default": "master"
    },
    "FrontendGitRemote": {
      "Description": "URI of the Git repository of the application",
      "Type": "String",
      "Default": "git@github.com:maddevelopmentco/tigo.git"
    },
    "FrontendGitBranch": {
      "Description": "Git branch to deploy",
      "Type": "String",
      "Default": "master"
    },
    "DeployPrivateKey": {
      "Description": "Base64 encoded zipped Private key used to access the Git repository",
      "Type": "String"
    },
    "DeployPublicKey": {
      "Description": "Base64 encoded zipped Public key used to access the Git repository",
      "Type": "String"
    },
    "FrontendDeployPrivateKey": {
      "Description": "Base64 encoded zipped Private key used to access the Git repository",
      "Type": "String"
    },
    "FrontendDeployPublicKey": {
      "Description": "Base64 encoded zipped Public key used to access the Git repository",
      "Type": "String"
    },
    "FrontendEnv": {
      "Description": "ENV vars passed to the proxy - format 'FOO=foo BAR=bar ...'",
      "Type": "String",
      "Default": "REACT_APP_API_HOST=\"https://mitienda.tigo.com.gt\" REACT_APP_NETCODE_URL=\"http://millicom-nonprod-prod.apigee.net/v1/tigo/mobile/msisdnAuth/net_code?client_id=snEO0U7aSy5GYYxHY7a8HHJ56sAgt4xS&response_type=code&scope=msisdn_auth&state=appSpecificState&redirect_uri=https://mitienda.tigo.com.gt/redirect\""
    },
    "ProxyEnv": {
      "Description": "ENV vars passed to the proxy - format 'FOO=foo BAR=bar ...'",
      "Type": "String",
      "Default": "FRONTEND_URL=\"https://mitienda.tigo.com.gt/\" BACKEND_URL=\"https://mitienda.tigo.com.gt/\""
    },
    "CertificateCrt": {
      "Description": "Base64 encoded zipped certificate (CRT) - e.g. zip -r9 tigoweb_gt_crt.zip fullcert.crt && cat tigoweb_gt_crt.zip | base64 | pbcopy",
      "Type": "String"
    },
    "CertificateKey": {
      "Description": "Base64 encoded zipped key (KEY) - e.g. zip -r9 tigoweb_gt_key.zip cert.key && cat tigoweb_gt_key.zip | base64 | pbcopy",
      "Type": "String"
    }
  },

  "Mappings": {
    "AWSRegionAMIEC2" : {
      "us-east-1": {"Ubuntu16": "ami-d15a75c7"},
      "us-west-2": {"Ubuntu16": "ami-746aba14"},
      "us-west-1": {"Ubuntu16": "ami-a9a8e4c9"},
      "eu-west-1": {"Ubuntu16": "ami-844e0bf7"},
      "eu-central-1": {"Ubuntu16": "ami-a9a557c6"},
      "ap-northeast-1": {"Ubuntu16": "ami-d82efcb9"},
      "ap-southeast-1": {"Ubuntu16": "ami-d554f1b6"},
      "ap-southeast-2": {"Ubuntu16": "ami-0bc1f168"}
    }
  },

  "Resources": {
    "TigoProxyEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "setup_process": [
              "create_swap",
              "install_deps",
              "create_deploy_user",
              "configure_ssh",
              "clone_code",
              "start_apps",
              "configure_nginx",
              "expose_builds",
              "reload_nginx"
            ]
          },
          "create_swap": {
            "commands": {
              "1-0": { "command": "touch /root/.user-data-progress && echo 'create_swap' >> /root/.user-data-progress" },
              "1-1": { "command": "fallocate -l 3G /swapfile && chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile && echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab" },
              "1-3": { "command": "sysctl vm.swappiness=10" },
              "1-4": { "command": "echo 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf" },
              "1-5": { "command": "sysctl vm.vfs_cache_pressure=50" },
              "1-6": { "command": "echo 'vm.vfs_cache_pressure=50' | sudo tee -a /etc/sysctl.conf" }
            }
          },
          "install_deps": {
            "commands": {
              "2-0": { "command": "echo 'install_deps' >> /root/.user-data-progress" },
              "2-1": { "command": "apt-get update && apt-get install python-software-properties curl -y && curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash - && apt-get install nodejs build-essential libssl-dev git unzip -y && apt-get install nginx -y && systemctl start nginx && npm install forever yarn -g" }
            }
          },
          "configure_nginx": {
            "commands": {
                "3-0": { "command": "echo 'configure_nginx' >> /root/.user-data-progress" },
                "3-1": { "command": "echo 'server { listen 80 default_server; listen [::]:80 default_server; server_name _; return 301 https://$host$request_uri; } server { listen 443 ssl; listen [::]:443 ssl; root /var/www/html; index index.html; server_name _; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH'; ssl_prefer_server_ciphers on; ssl_dhparam /etc/nginx/ssl/dhparam.pem; ssl_certificate /etc/nginx/ssl/certificate.crt; ssl_certificate_key /etc/nginx/ssl/certificate.key; location / { try_files $uri $uri/ @backend; } location @backend { proxy_pass http://127.0.0.1:5050; } }' > /etc/nginx/sites-available/default" },
                "3-2": { "command": "mkdir -p /etc/nginx/ssl" },
                "3-3": {
                  "command": {
                    "Fn::Join": [
                      "",
                      [
                        "mkdir -p /etc/nginx/ssl &&",
                        "echo '",
                        {
                          "Ref": "CertificateCrt"
                        },
                        "' | base64 --decode > cert_crt.zip && unzip -p cert_crt.zip > /etc/nginx/ssl/certificate.crt"
                      ]
                    ]
                  }
                },
                "3-4": {
                  "command": {
                    "Fn::Join": [
                      "",
                      [
                        "mkdir -p /etc/nginx/ssl &&",
                        "echo '",
                        {
                          "Ref": "CertificateKey"
                        },
                        "' | base64 --decode > cert_key.zip && unzip -p cert_key.zip > /etc/nginx/ssl/certificate.key"
                      ]
                    ]
                  }
                },
                "3-5": { "command": "openssl dhparam -dsaparam -out /etc/nginx/ssl/dhparam.pem 4096" }
            }
          },
          "reload_nginx": {
            "commands": {
              "4-0": { "command": "echo 'reload_nginx' >> /root/.user-data-progress" },
              "4-1": { "command": "systemctl reload nginx" }
            }
          },
          "create_deploy_user": {
            "commands": {
              "5-0": { "command": "echo 'create_deploy_user' >> /root/.user-data-progress" },
              "5-1": { "command": "adduser --disabled-password --gecos '' deploy" }
            }
          },
          "configure_ssh": {
            "commands": {
              "6-0": { "command": "echo 'configure_ssh' >> /root/.user-data-progress" },
              "6-1": { "command": "sudo -u deploy mkdir -p /home/deploy/.ssh" },
              "6-2": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sudo -u deploy mkdir -p /home/deploy/.ssh && ",
                      "echo '",
                      {
                        "Ref": "DeployPrivateKey"
                      },
                      "' | base64 --decode > privkey.zip ",
                      "&& unzip -p privkey.zip > /home/deploy/.ssh/tigo-proxy-deploy-key ",
                      "&& chmod 0400 /home/deploy/.ssh/tigo-proxy-deploy-key ",
                      "&& chown deploy:deploy /home/deploy/.ssh/tigo-proxy-deploy-key"
                    ]
                  ]
                }
              },
              "6-3": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sudo -u deploy mkdir -p /home/deploy/.ssh && ",
                      "echo '",
                      {
                        "Ref": "DeployPublicKey"
                      },
                      "' | base64 --decode > pubkey.zip ",
                      "&& unzip -p pubkey.zip > /home/deploy/.ssh/tigo-proxy-deploy-key.pub ",
                      "&& chmod 0400 /home/deploy/.ssh/tigo-proxy-deploy-key.pub ",
                      "&& chown deploy:deploy /home/deploy/.ssh/tigo-proxy-deploy-key.pub"
                    ]
                  ]
                }
              },
              "6-4": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sudo -u deploy mkdir -p /home/deploy/.ssh && ",
                      "echo '",
                      {
                        "Ref": "FrontendDeployPrivateKey"
                      },
                      "' | base64 --decode > front_privkey.zip ",
                      "&& unzip -p front_privkey.zip > /home/deploy/.ssh/tigo-deploy-key ",
                      "&& chmod 0400 /home/deploy/.ssh/tigo-deploy-key ",
                      "&& chown deploy:deploy /home/deploy/.ssh/tigo-deploy-key"
                    ]
                  ]
                }
              },
              "6-5": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sudo -u deploy mkdir -p /home/deploy/.ssh && ",
                      "echo '",
                      {
                        "Ref": "FrontendDeployPublicKey"
                      },
                      "' | base64 --decode > front_pubkey.zip ",
                      "&& unzip -p front_pubkey.zip > /home/deploy/.ssh/tigo-deploy-key.pub ",
                      "&& chmod 0400 /home/deploy/.ssh/tigo-deploy-key.pub ",
                      "&& chown deploy:deploy /home/deploy/.ssh/tigo-deploy-key.pub"
                    ]
                  ]
                }
              },
              "6-6": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sudo -u deploy mkdir -p /home/deploy/.ssh && ",
                      "sudo -u deploy echo -e \"",
                      "Host *\n",
                      "  StrictHostKeyChecking no\n",
                      "  CheckHostIP no\n",
                      "  UserKnownHostsFile /dev/null\n",
                      "\" >> /home/deploy/.ssh/config"
                    ]
                  ]
                }
              }
            }
          },
          "clone_code": {
            "commands": {
              "7-0": { "command": "echo 'clone_code' >> /root/.user-data-progress" },
              "7-1": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sudo -u deploy bash -c 'export HOME=/home/deploy && cd /home/deploy && eval `ssh-agent` && ssh-add /home/deploy/.ssh/tigo-proxy-deploy-key && git clone ",
                      {
                        "Ref": "GitRemote"
                      },
                      " /home/deploy/tigo-proxy' ",
                      "&& sudo -u deploy bash -c 'export HOME=/home/deploy && cd /home/deploy && eval `ssh-agent` && ssh-add /home/deploy/.ssh/tigo-proxy-deploy-key && git -C /home/deploy/tigo-proxy checkout ",
                      {
                        "Ref": "GitBranch"
                      },
                      "'"
                    ]
                  ]
                }
              },
              "7-3": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sudo -u deploy bash -c 'export HOME=/home/deploy && cd /home/deploy && eval `ssh-agent` && ssh-add /home/deploy/.ssh/tigo-deploy-key && git clone ",
                      {
                        "Ref": "FrontendGitRemote"
                      },
                      " /home/deploy/tigo' ",
                      "&& sudo -u deploy bash -c 'export HOME=/home/deploy && cd /home/deploy && eval `ssh-agent` && ssh-add /home/deploy/.ssh/tigo-deploy-key && git -C /home/deploy/tigo checkout ",
                      {
                        "Ref": "FrontendGitBranch"
                      },
                      "'"
                    ]
                  ]
                }
              }
            }
          },
          "start_apps": {
            "commands": {
              "8-0": { "command": "echo 'start_apps' >> /root/.user-data-progress" },
              "8-1": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sudo -u deploy bash -c 'export HOME=/home/deploy && cd /home/deploy/tigo-proxy && yarn && ",
                      {
                        "Ref": "ProxyEnv"
                      },
                      " forever start dist/index.js'"
                    ]
                  ]
                }
              },
              "8-2": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "sudo -u deploy bash -c 'export HOME=/home/deploy && cd /home/deploy/tigo && yarn && ",
                      {
                        "Ref": "FrontendEnv"
                      },
                      " yarn run build'"
                    ]
                  ]
                }
              }
            }
          },
          "expose_builds": {
            "commands": {
              "9-0": { "command": "echo 'expose_builds' >> /root/.user-data-progress" },
              "9-1": { "command": "cp -r /home/deploy/tigo/build/* /var/www/html" }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionAMIEC2",
            { "Ref": "AWS::Region" },
            "Ubuntu16"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "TigoProxySecurityGroup"
          }
        ],
        "Tags": [{ "Key": "Name", "Value": { "Ref": "InstanceName" } }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/usr/bin/env bash",
                "echo 'STARTUP' >> /root/.user-data-progress",
                "apt-get update",
                "apt-get -y install python-setuptools",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                "echo 'CFN_INIT' >> /root/.user-data-progress",
                {
                  "Fn::Join": [
                    "",
                    [
                      "/usr/local/bin/cfn-init -s ",
                      { "Ref" : "AWS::StackName" },
                      " -r TigoProxyEC2Instance --region ",
                      { "Ref" : "AWS::Region" },
                      " -c setup_process -v"
                    ]
                  ]
                }
              ]
            ]
          }
        }
      }
    },
    "TigoProxySecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH and HTTP access",
        "Tags": [{ "Key": "Cost Center", "Value": { "Ref": "TagCostCenter" } }],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ]
      }
    }
  },

  "Outputs": {
    "InstanceId": {
      "Description": "InstanceId of the newly created EC2 instance",
      "Value": {
        "Ref": "TigoProxyEC2Instance"
      }
    },
    "AZ": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": ["TigoProxyEC2Instance", "AvailabilityZone"]
      }
    },
    "PublicDNS": {
      "Description": "Public DNSName of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": ["TigoProxyEC2Instance", "PublicDnsName"]
      }
    },
    "PublicIP": {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": ["TigoProxyEC2Instance", "PublicIp"]
      }
    }
  }
}
